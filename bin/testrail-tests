#!/usr/bin/env perl
# ABSTRACT: List tests in a TestRail run matching the provided filters
# PODNAME: testrail-tests

=head1 SYNOPSIS

  testrail-tests [OPTIONS] | xargs prove -PTestrail=...

=head1 DESCRIPTION

testrail-tests - list tests in a run matching the provided filters.


=head1 PARAMETERS:

=head2 MANDATORY PARAMETERS

=over 4

--apiurl     : full URL to get to TestRail index document

--password   : Your TestRail Password, or a valid API key (TestRail 4.2 and above).

--user       : Your TestRail User Name.

-j --project : desired project name.

-r --run     : desired run name.

=back

All mandatory options not passed with the above switches, or in your ~/.testrailrc will be prompted for.

=head2 SEMI-OPTIONAL PARAMETERS

=over 4

-p --plan       : desired plan name.  Required if the run passed is a child of a plan.

-m --match      : attempt to find filenames matching the test names in the provided dir.

--no-match      : attempt to find filenames that do not match test names in the provided dir.

-n --no-recurse : if match (or no-match) passed, do not recurse subdirectories.

-e --encoding   : Character encoding of arguments.  Defaults to UTF-8. See L<Encode::Supported> for supported encodings.

=back

=head2 OPTIONAL PARAMETERS

=over 4

-c --config     : configuration name to filter plans in run.  Can be passed multiple times.

-s --status     : only list tests marked as [status] in testrail.  Can be passed multiple times.

-a --assignedto : only list tests assigned to user. Can be passed multiple times.

=back

=head1 CONFIGURATION FILE

In your \$HOME, (or the current directory, if your system has no concept of a home directory) put a file called .testrailrc with key=value syntax separated by newlines.
Valid Keys are the same as documented by L<App::Prove::Plugin::TestRail>.
All options specified thereby are overridden by passing the command-line switches above.

=head1 MISCELLANEOUS OPTIONS:

=over 4

--mock : don't do any real HTTP requests. Used only by tests.

--help : show this output

=back

=cut

use strict;
use warnings;
use utf8;

use TestRail::API;
use TestRail::Utils;

use Getopt::Long;
use File::HomeDir qw{my_home};

my $opts ={};

#Parse config file if we are missing api url/key or user
my $homedir = my_home() || '.';
if (-e $homedir . '/.testrailrc') {
    $opts = TestRail::Utils::parseConfig($homedir);
}

GetOptions(
    'apiurl=s'        => \$opts->{'apiurl'},
    'password=s'      => \$opts->{'password'},
    'user=s'          => \$opts->{'user'},
    'j|project=s'     => \$opts->{'project'},
    'p|plan=s'        => \$opts->{'plan'},
    'r|run=s'         => \$opts->{'run'},
    'c|config=s@'     => \$opts->{'configs'},
    's|status=s@'     => \$opts->{'statuses'},
    'a|assignedto=s@' => \$opts->{'users'},
    'mock'            => \$opts->{'mock'},
    'm|match=s'       => \$opts->{'match'},
    'no-match=s'      => \$opts->{'no-match'},
    'n|no-recurse'    => \$opts->{'no-recurse'},
    'e|encoding=s'    => \$opts->{'encoding'},
    'h|help'          => \$opts->{'help'}
);

if ($opts->{help}) { TestRail::Utils::help(); }

TestRail::Utils::interrogateUser($opts,qw{apiurl user password project run});

if ($opts->{mock}) {
    use Test::LWP::UserAgent::TestRailMock;
    $opts->{browser} = $Test::LWP::UserAgent::TestRailMock::mockObject;
    $opts->{debug} = 1;
}

my $tr = TestRail::API->new($opts->{apiurl},$opts->{user},$opts->{password},$opts->{'encoding'},$opts->{'debug'});
$tr->{'browser'} = $opts->{'browser'} if $opts->{'browser'};
$tr->{'debug'} = 0;

my $project = $tr->getProjectByName($opts->{'project'});
if (!$project) {
    print "No such project '$opts->{project}'.\n";
    exit 6;
}

my ($run,$plan);

if ($opts->{'plan'}) {
    $plan = $tr->getPlanByName($project->{'id'},$opts->{'plan'});
    if (!$plan) {
        print "No such plan '$opts->{plan}'!\n";
        exit 1;
    }
    $run = $tr->getChildRunByName($plan,$opts->{'run'}, $opts->{'configs'});
} else {
    $run = $tr->getRunByName($project->{'id'},$opts->{'run'});
}

if (!$run) {
    print "No such run '$opts->{run}' matching the provided configs (if any).\n";
    exit 2;
}

my ($status_ids,$user_ids);

#Process statuses
if ($opts->{'statuses'}) {
    eval { @$status_ids = $tr->statusNamesToIds(@{$opts->{'statuses'}}); };
    if ($@) {
        print "$@\n";
        exit 4;
    }
}

#Process assignedto ids
if ($opts->{'users'}) {
    eval { @$user_ids = $tr->userNamesToIds(@{$opts->{'users'}}); };
    if ($@) {
        print "$@\n";
        exit 5;
    }
}

my $cases = $tr->getTests($run->{'id'},$status_ids,$user_ids);

if (!$cases) {
    print "No cases in TestRail!\n";
    exit 3;
}

$opts->{'names-only'} = 1;
my @tests = TestRail::Utils::findTests($opts,@$cases);

print join("\n",@tests)."\n" if scalar(@tests);

exit 0;

__END__

L<TestRail::API>

L<File::HomeDir> for the finding of .testrailrc

=head1 SPECIAL THANKS

Thanks to cPanel Inc, for graciously funding the creation of this distribution.
